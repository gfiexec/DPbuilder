import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js";
export interface AddOnlyAppWhitelistInterface extends Interface {
    getFunction(nameOrSignature: "APP_WHITELIST_REGISTRY" | "addApp" | "isRegistered" | "keyHasPurpose" | "owner" | "transferOwnership"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "NewAppAddedToAddOnlyAppWhitelist"): EventFragment;
    encodeFunctionData(functionFragment: "APP_WHITELIST_REGISTRY", values?: undefined): string;
    encodeFunctionData(functionFragment: "addApp", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "isRegistered", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "keyHasPurpose", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "APP_WHITELIST_REGISTRY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addApp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isRegistered", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "keyHasPurpose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
export declare namespace NewAppAddedToAddOnlyAppWhitelistEvent {
    type InputTuple = [appAddress: AddressLike];
    type OutputTuple = [appAddress: string];
    interface OutputObject {
        appAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface AddOnlyAppWhitelist extends BaseContract {
    connect(runner?: ContractRunner | null): AddOnlyAppWhitelist;
    waitForDeployment(): Promise<this>;
    interface: AddOnlyAppWhitelistInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    APP_WHITELIST_REGISTRY: TypedContractMethod<[], [string], "view">;
    addApp: TypedContractMethod<[_app: AddressLike], [void], "nonpayable">;
    isRegistered: TypedContractMethod<[_app: AddressLike], [boolean], "view">;
    keyHasPurpose: TypedContractMethod<[
        key: BytesLike,
        purpose: BigNumberish
    ], [
        boolean
    ], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "APP_WHITELIST_REGISTRY"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "addApp"): TypedContractMethod<[_app: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "isRegistered"): TypedContractMethod<[_app: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "keyHasPurpose"): TypedContractMethod<[
        key: BytesLike,
        purpose: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "NewAppAddedToAddOnlyAppWhitelist"): TypedContractEvent<NewAppAddedToAddOnlyAppWhitelistEvent.InputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputObject>;
    filters: {
        "NewAppAddedToAddOnlyAppWhitelist(address)": TypedContractEvent<NewAppAddedToAddOnlyAppWhitelistEvent.InputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputObject>;
        NewAppAddedToAddOnlyAppWhitelist: TypedContractEvent<NewAppAddedToAddOnlyAppWhitelistEvent.InputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputTuple, NewAppAddedToAddOnlyAppWhitelistEvent.OutputObject>;
    };
}
