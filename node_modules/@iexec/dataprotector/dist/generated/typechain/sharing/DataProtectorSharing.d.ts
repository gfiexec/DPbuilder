import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js";
export declare namespace ISubscription {
    type SubscriptionParamsStruct = {
        price: BigNumberish;
        duration: BigNumberish;
    };
    type SubscriptionParamsStructOutput = [
        price: bigint,
        duration: bigint
    ] & {
        price: bigint;
        duration: bigint;
    };
}
export declare namespace IRental {
    type RentingParamsStruct = {
        price: BigNumberish;
        duration: BigNumberish;
    };
    type RentingParamsStructOutput = [price: bigint, duration: bigint] & {
        price: bigint;
        duration: bigint;
    };
}
export declare namespace IexecLibOrders_v5 {
    type WorkerpoolOrderStruct = {
        workerpool: AddressLike;
        workerpoolprice: BigNumberish;
        volume: BigNumberish;
        tag: BytesLike;
        category: BigNumberish;
        trust: BigNumberish;
        apprestrict: AddressLike;
        datasetrestrict: AddressLike;
        requesterrestrict: AddressLike;
        salt: BytesLike;
        sign: BytesLike;
    };
    type WorkerpoolOrderStructOutput = [
        workerpool: string,
        workerpoolprice: bigint,
        volume: bigint,
        tag: string,
        category: bigint,
        trust: bigint,
        apprestrict: string,
        datasetrestrict: string,
        requesterrestrict: string,
        salt: string,
        sign: string
    ] & {
        workerpool: string;
        workerpoolprice: bigint;
        volume: bigint;
        tag: string;
        category: bigint;
        trust: bigint;
        apprestrict: string;
        datasetrestrict: string;
        requesterrestrict: string;
        salt: string;
        sign: string;
    };
}
export declare namespace ISale {
    type SellingParamsStruct = {
        isForSale: boolean;
        price: BigNumberish;
    };
    type SellingParamsStructOutput = [
        isForSale: boolean,
        price: bigint
    ] & {
        isForSale: boolean;
        price: bigint;
    };
}
export interface DataProtectorSharingInterface extends Interface {
    getFunction(nameOrSignature: "ADD_ONLY_APP_WHITELIST_REGISTRY" | "DEFAULT_ADMIN_ROLE" | "addProtectedDataToCollection" | "approve" | "balanceOf" | "burn" | "buyProtectedData" | "collectionDetails" | "consumeProtectedData" | "createCollection" | "earning" | "getApproved" | "getCollectionSubscriber" | "getProtectedDataRenter" | "getRoleAdmin" | "grantRole" | "hasRole" | "initialize" | "isApprovedForAll" | "multicall" | "name" | "onERC721Received" | "ownerOf" | "protectedDataDetails" | "receiveApproval" | "removeProtectedDataForSale" | "removeProtectedDataFromCollection" | "removeProtectedDataFromRenting" | "removeProtectedDataFromSubscription" | "renounceRole" | "rentProtectedData" | "revokeRole" | "safeTransferFrom(address,address,uint256)" | "safeTransferFrom(address,address,uint256,bytes)" | "setApprovalForAll" | "setProtectedDataForSale" | "setProtectedDataToRenting" | "setProtectedDataToSubscription" | "setSubscriptionParams" | "subscribeToCollection" | "supportsInterface" | "symbol" | "tokenURI" | "transferFrom" | "updateEnv"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "ApprovalForAll" | "Initialized" | "NewRental" | "NewSubscription" | "NewSubscriptionParams" | "ProtectedDataAddedForRenting" | "ProtectedDataAddedForSale" | "ProtectedDataAddedForSubscription" | "ProtectedDataConsumed" | "ProtectedDataRemovedFromRenting" | "ProtectedDataRemovedFromSale" | "ProtectedDataRemovedFromSubscription" | "ProtectedDataSold" | "ProtectedDataTransfer" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "ADD_ONLY_APP_WHITELIST_REGISTRY", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "addProtectedDataToCollection", values: [BigNumberish, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "buyProtectedData", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "collectionDetails", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "consumeProtectedData", values: [AddressLike, IexecLibOrders_v5.WorkerpoolOrderStruct, AddressLike]): string;
    encodeFunctionData(functionFragment: "createCollection", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "earning", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getApproved", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getCollectionSubscriber", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "getProtectedDataRenter", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values?: undefined): string;
    encodeFunctionData(functionFragment: "isApprovedForAll", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "ownerOf", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "protectedDataDetails", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "receiveApproval", values: [AddressLike, BigNumberish, AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "removeProtectedDataForSale", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeProtectedDataFromCollection", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeProtectedDataFromRenting", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "removeProtectedDataFromSubscription", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "rentProtectedData", values: [AddressLike, IRental.RentingParamsStruct]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256)", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", values: [AddressLike, AddressLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setApprovalForAll", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "setProtectedDataForSale", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setProtectedDataToRenting", values: [AddressLike, IRental.RentingParamsStruct]): string;
    encodeFunctionData(functionFragment: "setProtectedDataToSubscription", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "setSubscriptionParams", values: [BigNumberish, ISubscription.SubscriptionParamsStruct]): string;
    encodeFunctionData(functionFragment: "subscribeToCollection", values: [BigNumberish, ISubscription.SubscriptionParamsStruct]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "tokenURI", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateEnv", values: [string, string]): string;
    decodeFunctionResult(functionFragment: "ADD_ONLY_APP_WHITELIST_REGISTRY", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addProtectedDataToCollection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "buyProtectedData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "collectionDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "consumeProtectedData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createCollection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "earning", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getApproved", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCollectionSubscriber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getProtectedDataRenter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isApprovedForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protectedDataDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveApproval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeProtectedDataForSale", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeProtectedDataFromCollection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeProtectedDataFromRenting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeProtectedDataFromSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rentProtectedData", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "safeTransferFrom(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setApprovalForAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setProtectedDataForSale", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setProtectedDataToRenting", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setProtectedDataToSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSubscriptionParams", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "subscribeToCollection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateEnv", data: BytesLike): Result;
}
export declare namespace ApprovalEvent {
    type InputTuple = [
        owner: AddressLike,
        approved: AddressLike,
        tokenId: BigNumberish
    ];
    type OutputTuple = [owner: string, approved: string, tokenId: bigint];
    interface OutputObject {
        owner: string;
        approved: string;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ApprovalForAllEvent {
    type InputTuple = [
        owner: AddressLike,
        operator: AddressLike,
        approved: boolean
    ];
    type OutputTuple = [
        owner: string,
        operator: string,
        approved: boolean
    ];
    interface OutputObject {
        owner: string;
        operator: string;
        approved: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NewRentalEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike,
        renter: AddressLike,
        endDate: BigNumberish
    ];
    type OutputTuple = [
        collectionTokenId: bigint,
        protectedData: string,
        renter: string,
        endDate: bigint
    ];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
        renter: string;
        endDate: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NewSubscriptionEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        subscriber: AddressLike,
        endDate: BigNumberish
    ];
    type OutputTuple = [
        collectionTokenId: bigint,
        subscriber: string,
        endDate: bigint
    ];
    interface OutputObject {
        collectionTokenId: bigint;
        subscriber: string;
        endDate: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace NewSubscriptionParamsEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        subscriptionParams: ISubscription.SubscriptionParamsStruct
    ];
    type OutputTuple = [
        collectionTokenId: bigint,
        subscriptionParams: ISubscription.SubscriptionParamsStructOutput
    ];
    interface OutputObject {
        collectionTokenId: bigint;
        subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataAddedForRentingEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike,
        rentingParams: IRental.RentingParamsStruct
    ];
    type OutputTuple = [
        collectionTokenId: bigint,
        protectedData: string,
        rentingParams: IRental.RentingParamsStructOutput
    ];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
        rentingParams: IRental.RentingParamsStructOutput;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataAddedForSaleEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike,
        price: BigNumberish
    ];
    type OutputTuple = [
        collectionTokenId: bigint,
        protectedData: string,
        price: bigint
    ];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
        price: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataAddedForSubscriptionEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike
    ];
    type OutputTuple = [collectionTokenId: bigint, protectedData: string];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataConsumedEvent {
    type InputTuple = [
        dealId: BytesLike,
        protectedData: AddressLike,
        mode: BigNumberish
    ];
    type OutputTuple = [
        dealId: string,
        protectedData: string,
        mode: bigint
    ];
    interface OutputObject {
        dealId: string;
        protectedData: string;
        mode: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataRemovedFromRentingEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike
    ];
    type OutputTuple = [collectionTokenId: bigint, protectedData: string];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataRemovedFromSaleEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike
    ];
    type OutputTuple = [collectionTokenId: bigint, protectedData: string];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataRemovedFromSubscriptionEvent {
    type InputTuple = [
        collectionTokenId: BigNumberish,
        protectedData: AddressLike
    ];
    type OutputTuple = [collectionTokenId: bigint, protectedData: string];
    interface OutputObject {
        collectionTokenId: bigint;
        protectedData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataSoldEvent {
    type InputTuple = [
        collectionTokenIdFrom: BigNumberish,
        to: AddressLike,
        protectedData: AddressLike
    ];
    type OutputTuple = [
        collectionTokenIdFrom: bigint,
        to: string,
        protectedData: string
    ];
    interface OutputObject {
        collectionTokenIdFrom: bigint;
        to: string;
        protectedData: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ProtectedDataTransferEvent {
    type InputTuple = [
        protectedData: AddressLike,
        newCollection: BigNumberish,
        oldCollection: BigNumberish,
        addOnlyAppWhitelist: AddressLike
    ];
    type OutputTuple = [
        protectedData: string,
        newCollection: bigint,
        oldCollection: bigint,
        addOnlyAppWhitelist: string
    ];
    interface OutputObject {
        protectedData: string;
        newCollection: bigint;
        oldCollection: bigint;
        addOnlyAppWhitelist: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TransferEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, tokenId: bigint];
    interface OutputObject {
        from: string;
        to: string;
        tokenId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface DataProtectorSharing extends BaseContract {
    connect(runner?: ContractRunner | null): DataProtectorSharing;
    waitForDeployment(): Promise<this>;
    interface: DataProtectorSharingInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    ADD_ONLY_APP_WHITELIST_REGISTRY: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    addProtectedDataToCollection: TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _protectedData: AddressLike,
        _appWhitelist: AddressLike
    ], [
        void
    ], "nonpayable">;
    approve: TypedContractMethod<[
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    buyProtectedData: TypedContractMethod<[
        _protectedData: AddressLike,
        _to: AddressLike,
        _price: BigNumberish
    ], [
        void
    ], "nonpayable">;
    collectionDetails: TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [
            bigint,
            bigint,
            ISubscription.SubscriptionParamsStructOutput
        ] & {
            size: bigint;
            lastSubscriptionExpiration: bigint;
            subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
        }
    ], "view">;
    consumeProtectedData: TypedContractMethod<[
        _protectedData: AddressLike,
        _workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
        _app: AddressLike
    ], [
        string
    ], "nonpayable">;
    createCollection: TypedContractMethod<[
        _to: AddressLike
    ], [
        bigint
    ], "nonpayable">;
    earning: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getCollectionSubscriber: TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriberAddress: AddressLike
    ], [
        bigint
    ], "view">;
    getProtectedDataRenter: TypedContractMethod<[
        _protectedData: AddressLike,
        _renterAddress: AddressLike
    ], [
        bigint
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[], [void], "nonpayable">;
    isApprovedForAll: TypedContractMethod<[
        owner: AddressLike,
        operator: AddressLike
    ], [
        boolean
    ], "view">;
    multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    name: TypedContractMethod<[], [string], "view">;
    onERC721Received: TypedContractMethod<[
        arg0: AddressLike,
        arg1: AddressLike,
        arg2: BigNumberish,
        arg3: BytesLike
    ], [
        string
    ], "nonpayable">;
    ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    protectedDataDetails: TypedContractMethod<[
        arg0: AddressLike
    ], [
        [
            bigint,
            string,
            bigint,
            boolean,
            IRental.RentingParamsStructOutput,
            ISale.SellingParamsStructOutput
        ] & {
            collection: bigint;
            addOnlyAppWhitelist: string;
            lastRentalExpiration: bigint;
            inSubscription: boolean;
            rentingParams: IRental.RentingParamsStructOutput;
            sellingParams: ISale.SellingParamsStructOutput;
        }
    ], "view">;
    receiveApproval: TypedContractMethod<[
        _sender: AddressLike,
        arg1: BigNumberish,
        arg2: AddressLike,
        _extraData: BytesLike
    ], [
        boolean
    ], "nonpayable">;
    removeProtectedDataForSale: TypedContractMethod<[
        _protectedData: AddressLike
    ], [
        void
    ], "nonpayable">;
    removeProtectedDataFromCollection: TypedContractMethod<[
        _protectedData: AddressLike
    ], [
        void
    ], "nonpayable">;
    removeProtectedDataFromRenting: TypedContractMethod<[
        _protectedData: AddressLike
    ], [
        void
    ], "nonpayable">;
    removeProtectedDataFromSubscription: TypedContractMethod<[
        _protectedData: AddressLike
    ], [
        void
    ], "nonpayable">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    rentProtectedData: TypedContractMethod<[
        _protectedData: AddressLike,
        _rentingParams: IRental.RentingParamsStruct
    ], [
        bigint
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    "safeTransferFrom(address,address,uint256)": TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    setApprovalForAll: TypedContractMethod<[
        operator: AddressLike,
        approved: boolean
    ], [
        void
    ], "nonpayable">;
    setProtectedDataForSale: TypedContractMethod<[
        _protectedData: AddressLike,
        _price: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setProtectedDataToRenting: TypedContractMethod<[
        _protectedData: AddressLike,
        _rentingParams: IRental.RentingParamsStruct
    ], [
        void
    ], "nonpayable">;
    setProtectedDataToSubscription: TypedContractMethod<[
        _protectedData: AddressLike
    ], [
        void
    ], "nonpayable">;
    setSubscriptionParams: TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ], [
        void
    ], "nonpayable">;
    subscribeToCollection: TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ], [
        bigint
    ], "nonpayable">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    transferFrom: TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateEnv: TypedContractMethod<[
        iexecResultStorageProvider_: string,
        iexecResultStorageProxy_: string
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "ADD_ONLY_APP_WHITELIST_REGISTRY"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "addProtectedDataToCollection"): TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _protectedData: AddressLike,
        _appWhitelist: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "burn"): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "buyProtectedData"): TypedContractMethod<[
        _protectedData: AddressLike,
        _to: AddressLike,
        _price: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "collectionDetails"): TypedContractMethod<[
        arg0: BigNumberish
    ], [
        [
            bigint,
            bigint,
            ISubscription.SubscriptionParamsStructOutput
        ] & {
            size: bigint;
            lastSubscriptionExpiration: bigint;
            subscriptionParams: ISubscription.SubscriptionParamsStructOutput;
        }
    ], "view">;
    getFunction(nameOrSignature: "consumeProtectedData"): TypedContractMethod<[
        _protectedData: AddressLike,
        _workerpoolOrder: IexecLibOrders_v5.WorkerpoolOrderStruct,
        _app: AddressLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "createCollection"): TypedContractMethod<[_to: AddressLike], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "earning"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getApproved"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "getCollectionSubscriber"): TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriberAddress: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getProtectedDataRenter"): TypedContractMethod<[
        _protectedData: AddressLike,
        _renterAddress: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "isApprovedForAll"): TypedContractMethod<[
        owner: AddressLike,
        operator: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "multicall"): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "onERC721Received"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: AddressLike,
        arg2: BigNumberish,
        arg3: BytesLike
    ], [
        string
    ], "nonpayable">;
    getFunction(nameOrSignature: "ownerOf"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "protectedDataDetails"): TypedContractMethod<[
        arg0: AddressLike
    ], [
        [
            bigint,
            string,
            bigint,
            boolean,
            IRental.RentingParamsStructOutput,
            ISale.SellingParamsStructOutput
        ] & {
            collection: bigint;
            addOnlyAppWhitelist: string;
            lastRentalExpiration: bigint;
            inSubscription: boolean;
            rentingParams: IRental.RentingParamsStructOutput;
            sellingParams: ISale.SellingParamsStructOutput;
        }
    ], "view">;
    getFunction(nameOrSignature: "receiveApproval"): TypedContractMethod<[
        _sender: AddressLike,
        arg1: BigNumberish,
        arg2: AddressLike,
        _extraData: BytesLike
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "removeProtectedDataForSale"): TypedContractMethod<[_protectedData: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "removeProtectedDataFromCollection"): TypedContractMethod<[_protectedData: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "removeProtectedDataFromRenting"): TypedContractMethod<[_protectedData: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "removeProtectedDataFromSubscription"): TypedContractMethod<[_protectedData: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "rentProtectedData"): TypedContractMethod<[
        _protectedData: AddressLike,
        _rentingParams: IRental.RentingParamsStruct
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "safeTransferFrom(address,address,uint256)"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish,
        data: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setApprovalForAll"): TypedContractMethod<[
        operator: AddressLike,
        approved: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setProtectedDataForSale"): TypedContractMethod<[
        _protectedData: AddressLike,
        _price: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setProtectedDataToRenting"): TypedContractMethod<[
        _protectedData: AddressLike,
        _rentingParams: IRental.RentingParamsStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setProtectedDataToSubscription"): TypedContractMethod<[_protectedData: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSubscriptionParams"): TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "subscribeToCollection"): TypedContractMethod<[
        _collectionTokenId: BigNumberish,
        _subscriptionParams: ISubscription.SubscriptionParamsStruct
    ], [
        bigint
    ], "nonpayable">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "tokenURI"): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        from: AddressLike,
        to: AddressLike,
        tokenId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateEnv"): TypedContractMethod<[
        iexecResultStorageProvider_: string,
        iexecResultStorageProxy_: string
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    getEvent(key: "ApprovalForAll"): TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "NewRental"): TypedContractEvent<NewRentalEvent.InputTuple, NewRentalEvent.OutputTuple, NewRentalEvent.OutputObject>;
    getEvent(key: "NewSubscription"): TypedContractEvent<NewSubscriptionEvent.InputTuple, NewSubscriptionEvent.OutputTuple, NewSubscriptionEvent.OutputObject>;
    getEvent(key: "NewSubscriptionParams"): TypedContractEvent<NewSubscriptionParamsEvent.InputTuple, NewSubscriptionParamsEvent.OutputTuple, NewSubscriptionParamsEvent.OutputObject>;
    getEvent(key: "ProtectedDataAddedForRenting"): TypedContractEvent<ProtectedDataAddedForRentingEvent.InputTuple, ProtectedDataAddedForRentingEvent.OutputTuple, ProtectedDataAddedForRentingEvent.OutputObject>;
    getEvent(key: "ProtectedDataAddedForSale"): TypedContractEvent<ProtectedDataAddedForSaleEvent.InputTuple, ProtectedDataAddedForSaleEvent.OutputTuple, ProtectedDataAddedForSaleEvent.OutputObject>;
    getEvent(key: "ProtectedDataAddedForSubscription"): TypedContractEvent<ProtectedDataAddedForSubscriptionEvent.InputTuple, ProtectedDataAddedForSubscriptionEvent.OutputTuple, ProtectedDataAddedForSubscriptionEvent.OutputObject>;
    getEvent(key: "ProtectedDataConsumed"): TypedContractEvent<ProtectedDataConsumedEvent.InputTuple, ProtectedDataConsumedEvent.OutputTuple, ProtectedDataConsumedEvent.OutputObject>;
    getEvent(key: "ProtectedDataRemovedFromRenting"): TypedContractEvent<ProtectedDataRemovedFromRentingEvent.InputTuple, ProtectedDataRemovedFromRentingEvent.OutputTuple, ProtectedDataRemovedFromRentingEvent.OutputObject>;
    getEvent(key: "ProtectedDataRemovedFromSale"): TypedContractEvent<ProtectedDataRemovedFromSaleEvent.InputTuple, ProtectedDataRemovedFromSaleEvent.OutputTuple, ProtectedDataRemovedFromSaleEvent.OutputObject>;
    getEvent(key: "ProtectedDataRemovedFromSubscription"): TypedContractEvent<ProtectedDataRemovedFromSubscriptionEvent.InputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputObject>;
    getEvent(key: "ProtectedDataSold"): TypedContractEvent<ProtectedDataSoldEvent.InputTuple, ProtectedDataSoldEvent.OutputTuple, ProtectedDataSoldEvent.OutputObject>;
    getEvent(key: "ProtectedDataTransfer"): TypedContractEvent<ProtectedDataTransferEvent.InputTuple, ProtectedDataTransferEvent.OutputTuple, ProtectedDataTransferEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        "ApprovalForAll(address,address,bool)": TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
        ApprovalForAll: TypedContractEvent<ApprovalForAllEvent.InputTuple, ApprovalForAllEvent.OutputTuple, ApprovalForAllEvent.OutputObject>;
        "Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "NewRental(uint256,address,address,uint48)": TypedContractEvent<NewRentalEvent.InputTuple, NewRentalEvent.OutputTuple, NewRentalEvent.OutputObject>;
        NewRental: TypedContractEvent<NewRentalEvent.InputTuple, NewRentalEvent.OutputTuple, NewRentalEvent.OutputObject>;
        "NewSubscription(uint256,address,uint48)": TypedContractEvent<NewSubscriptionEvent.InputTuple, NewSubscriptionEvent.OutputTuple, NewSubscriptionEvent.OutputObject>;
        NewSubscription: TypedContractEvent<NewSubscriptionEvent.InputTuple, NewSubscriptionEvent.OutputTuple, NewSubscriptionEvent.OutputObject>;
        "NewSubscriptionParams(uint256,tuple)": TypedContractEvent<NewSubscriptionParamsEvent.InputTuple, NewSubscriptionParamsEvent.OutputTuple, NewSubscriptionParamsEvent.OutputObject>;
        NewSubscriptionParams: TypedContractEvent<NewSubscriptionParamsEvent.InputTuple, NewSubscriptionParamsEvent.OutputTuple, NewSubscriptionParamsEvent.OutputObject>;
        "ProtectedDataAddedForRenting(uint256,address,tuple)": TypedContractEvent<ProtectedDataAddedForRentingEvent.InputTuple, ProtectedDataAddedForRentingEvent.OutputTuple, ProtectedDataAddedForRentingEvent.OutputObject>;
        ProtectedDataAddedForRenting: TypedContractEvent<ProtectedDataAddedForRentingEvent.InputTuple, ProtectedDataAddedForRentingEvent.OutputTuple, ProtectedDataAddedForRentingEvent.OutputObject>;
        "ProtectedDataAddedForSale(uint256,address,uint72)": TypedContractEvent<ProtectedDataAddedForSaleEvent.InputTuple, ProtectedDataAddedForSaleEvent.OutputTuple, ProtectedDataAddedForSaleEvent.OutputObject>;
        ProtectedDataAddedForSale: TypedContractEvent<ProtectedDataAddedForSaleEvent.InputTuple, ProtectedDataAddedForSaleEvent.OutputTuple, ProtectedDataAddedForSaleEvent.OutputObject>;
        "ProtectedDataAddedForSubscription(uint256,address)": TypedContractEvent<ProtectedDataAddedForSubscriptionEvent.InputTuple, ProtectedDataAddedForSubscriptionEvent.OutputTuple, ProtectedDataAddedForSubscriptionEvent.OutputObject>;
        ProtectedDataAddedForSubscription: TypedContractEvent<ProtectedDataAddedForSubscriptionEvent.InputTuple, ProtectedDataAddedForSubscriptionEvent.OutputTuple, ProtectedDataAddedForSubscriptionEvent.OutputObject>;
        "ProtectedDataConsumed(bytes32,address,uint8)": TypedContractEvent<ProtectedDataConsumedEvent.InputTuple, ProtectedDataConsumedEvent.OutputTuple, ProtectedDataConsumedEvent.OutputObject>;
        ProtectedDataConsumed: TypedContractEvent<ProtectedDataConsumedEvent.InputTuple, ProtectedDataConsumedEvent.OutputTuple, ProtectedDataConsumedEvent.OutputObject>;
        "ProtectedDataRemovedFromRenting(uint256,address)": TypedContractEvent<ProtectedDataRemovedFromRentingEvent.InputTuple, ProtectedDataRemovedFromRentingEvent.OutputTuple, ProtectedDataRemovedFromRentingEvent.OutputObject>;
        ProtectedDataRemovedFromRenting: TypedContractEvent<ProtectedDataRemovedFromRentingEvent.InputTuple, ProtectedDataRemovedFromRentingEvent.OutputTuple, ProtectedDataRemovedFromRentingEvent.OutputObject>;
        "ProtectedDataRemovedFromSale(uint256,address)": TypedContractEvent<ProtectedDataRemovedFromSaleEvent.InputTuple, ProtectedDataRemovedFromSaleEvent.OutputTuple, ProtectedDataRemovedFromSaleEvent.OutputObject>;
        ProtectedDataRemovedFromSale: TypedContractEvent<ProtectedDataRemovedFromSaleEvent.InputTuple, ProtectedDataRemovedFromSaleEvent.OutputTuple, ProtectedDataRemovedFromSaleEvent.OutputObject>;
        "ProtectedDataRemovedFromSubscription(uint256,address)": TypedContractEvent<ProtectedDataRemovedFromSubscriptionEvent.InputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputObject>;
        ProtectedDataRemovedFromSubscription: TypedContractEvent<ProtectedDataRemovedFromSubscriptionEvent.InputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputTuple, ProtectedDataRemovedFromSubscriptionEvent.OutputObject>;
        "ProtectedDataSold(uint256,address,address)": TypedContractEvent<ProtectedDataSoldEvent.InputTuple, ProtectedDataSoldEvent.OutputTuple, ProtectedDataSoldEvent.OutputObject>;
        ProtectedDataSold: TypedContractEvent<ProtectedDataSoldEvent.InputTuple, ProtectedDataSoldEvent.OutputTuple, ProtectedDataSoldEvent.OutputObject>;
        "ProtectedDataTransfer(address,uint256,uint256,address)": TypedContractEvent<ProtectedDataTransferEvent.InputTuple, ProtectedDataTransferEvent.OutputTuple, ProtectedDataTransferEvent.OutputObject>;
        ProtectedDataTransfer: TypedContractEvent<ProtectedDataTransferEvent.InputTuple, ProtectedDataTransferEvent.OutputTuple, ProtectedDataTransferEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    };
}
