import { ethers } from 'ethers';
import type { DataProtectorSharing } from '../../../../generated/typechain/sharing/DataProtectorSharing.js';
import type { IRegistry } from '../../../../generated/typechain/sharing/interfaces/IRegistry.js';
import type { AddOnlyAppWhitelist } from '../../../../generated/typechain/sharing/registry/AddOnlyAppWhitelist.js';
import type { AddOnlyAppWhitelistRegistry } from '../../../../generated/typechain/sharing/registry/AddOnlyAppWhitelistRegistry.js';
import type { Address, Collection, ProtectedDataDetails, RentingParams, SubscriptionParams } from '../../types/index.js';
export declare const onlyCollectionOperator: ({ sharingContract, collectionId, userAddress, }: {
    sharingContract: DataProtectorSharing;
    collectionId: number;
    userAddress: Address;
}) => Promise<void>;
export declare const onlyProtectedDataNotInCollection: ({ sharingContract, protectedData, }: {
    sharingContract: DataProtectorSharing;
    protectedData: Address;
}) => Promise<void>;
export declare const onlyCollectionNotSubscribed: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyCollectionAvailableForSubscription: (collectionDetails: Collection) => void;
export declare const onlyCollectionEmpty: (collectionDetails: Collection) => void;
export declare const onlyProtectedDataNotIncludedInSubscription: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyProtectedDataIncludedInSubscription: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyValidSubscriptionParams: (expectedSubscriptionParams: SubscriptionParams, currentSubscriptionParams: SubscriptionParams) => void;
export declare const onlyProtectedDataNotRented: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyProtectedDataCurrentlyForRent: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyProtectedDataNotCurrentlyForRent: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyValidRentingParams: (expectedRentingParams: RentingParams, currentRentingParams: RentingParams) => void;
export declare const onlyProtectedDataNotCurrentlyForSale: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyProtectedDataCurrentlyForSale: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyValidSellingParams: (expectedPrice: number, currentPrice: number) => void;
export declare const onlyProtectedDataAuthorizedToBeConsumed: (protectedDataDetails: ProtectedDataDetails) => void;
export declare const onlyBalanceNotEmpty: ({ sharingContract, userAddress, }: {
    sharingContract: DataProtectorSharing;
    userAddress: Address;
}) => Promise<void>;
export declare const onlyAppWhitelistRegistered: ({ addOnlyAppWhitelistRegistryContract, addOnlyAppWhitelist, }: {
    addOnlyAppWhitelistRegistryContract: AddOnlyAppWhitelistRegistry;
    addOnlyAppWhitelist: Address;
}) => Promise<string>;
export declare const onlyAppWhitelistRegisteredAndManagedByOwner: ({ addOnlyAppWhitelistRegistryContract, addOnlyAppWhitelist, userAddress, }: {
    addOnlyAppWhitelistRegistryContract: AddOnlyAppWhitelistRegistry;
    addOnlyAppWhitelist: Address;
    userAddress: Address;
}) => Promise<void>;
export declare const onlyAppNotInAppWhitelist: ({ addOnlyAppWhitelistContract, app, }: {
    addOnlyAppWhitelistContract: AddOnlyAppWhitelist;
    app: Address;
}) => Promise<void>;
export declare const onlyAppInAddOnlyAppWhitelist: ({ addOnlyAppWhitelistContract, app, }: {
    addOnlyAppWhitelistContract: AddOnlyAppWhitelist;
    app: Address;
}) => Promise<void>;
export declare const onlyAppOwnedBySharingContract: ({ sharingContractAddress, pocoAppRegistryContract, app, }: {
    sharingContractAddress: Address;
    pocoAppRegistryContract: IRegistry;
    app: Address;
}) => Promise<void>;
export declare const onlyAccountWithMinimumBalance: ({ accountDetails, minimumBalance, }: {
    accountDetails: {
        balance: bigint;
    };
    minimumBalance: ethers.BigNumberish;
}) => void;
