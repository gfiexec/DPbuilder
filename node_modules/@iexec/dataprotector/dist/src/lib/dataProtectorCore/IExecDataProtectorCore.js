import { isValidProvider } from '../../utils/validators.js';
import { IExecDataProtectorModule } from '../IExecDataProtectorModule.js';
import { getGrantedAccess } from './getGrantedAccess.js';
import { getProtectedData } from './getProtectedData.js';
import { grantAccess } from './grantAccess.js';
import { processProtectedData } from './processProtectedData.js';
import { protectData } from './protectData.js';
import { revokeAllAccess } from './revokeAllAccess.js';
import { revokeOneAccess } from './revokeOneAccess.js';
import { transferOwnership } from './transferOwnership.js';
class IExecDataProtectorCore extends IExecDataProtectorModule {
    async protectData(args) {
        await isValidProvider(this.iexec);
        return protectData({
            ...args,
            dataprotectorContractAddress: this.dataprotectorContractAddress,
            ipfsNode: this.ipfsNode,
            ipfsGateway: this.ipfsGateway,
            iexec: this.iexec,
            iexecDebug: this.iexecDebug,
        });
    }
    async grantAccess(args) {
        await isValidProvider(this.iexec);
        return grantAccess({ ...args, iexec: this.iexec });
    }
    async revokeOneAccess(args) {
        await isValidProvider(this.iexec);
        return revokeOneAccess({ ...args, iexec: this.iexec });
    }
    async revokeAllAccess(args) {
        await isValidProvider(this.iexec);
        return revokeAllAccess({ ...args, iexec: this.iexec });
    }
    async transferOwnership(args) {
        await isValidProvider(this.iexec);
        return transferOwnership({ ...args, iexec: this.iexec });
    }
    async processProtectedData(args) {
        await isValidProvider(this.iexec);
        return processProtectedData({
            ...args,
            iexec: this.iexec,
        });
    }
    // ----- READ METHODS -----
    getProtectedData(args) {
        return getProtectedData({
            ...args,
            iexec: this.iexec,
            graphQLClient: this.graphQLClient,
        });
    }
    getGrantedAccess(args) {
        return getGrantedAccess({ ...args, iexec: this.iexec });
    }
}
export { IExecDataProtectorCore };
//# sourceMappingURL=IExecDataProtectorCore.js.map