import { IExec } from 'iexec';
export declare const isValidProvider: (iexec: IExec) => Promise<void>;
export declare const throwIfMissing: () => never;
export declare const isEnsTest: (value: string) => boolean;
export declare const booleanSchema: () => import("yup").BooleanSchema<boolean, import("yup").AnyObject, undefined, "">;
export declare const stringSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const urlSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const taskIdSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const addressSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const addressOrEnsSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const positiveIntegerStringSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const positiveNumberSchema: () => import("yup").NumberSchema<number, import("yup").AnyObject, undefined, "">;
export declare const numberBetweenSchema: (min: number, max: number) => import("yup").NumberSchema<number, import("yup").AnyObject, undefined, "">;
export declare const positiveStrictIntegerStringSchema: () => import("yup").StringSchema<string, import("yup").AnyObject, undefined, "">;
export declare const grantedAccessSchema: () => import("yup").ObjectSchema<{
    dataset: string;
    datasetprice: string;
    volume: string;
    tag: string;
    apprestrict: string;
    workerpoolrestrict: string;
    requesterrestrict: string;
    salt: string;
    sign: string;
}, import("yup").AnyObject, any, "d">;
export declare const urlArraySchema: () => import("yup").ArraySchema<string[], import("yup").AnyObject, "", "">;
export declare const secretsSchema: () => import("yup").ObjectSchema<{}, import("yup").AnyObject, {}, "">;
export declare const validateOnStatusUpdateCallback: <T>(value?: unknown) => T;
